#####
# CS 686 Artificial Intelligence - Assignment 1
#
# Sudoku Solver implemented using a constraint-satisfaction formulation
# Implements a dumb backtracking method with random cell selection
#
# Ben Selby, January 2013
#####

import math
import random
import time

def main():
    # TODO: add some code to read puzzles from a file?
    
    ### Easy Puzzle
#    puzzle = [[0, 3, 0, 0, 8, 0, 0, 0, 6],
#              [5, 0, 0, 2, 9, 4, 7, 1, 0],
#              [0, 0, 0, 3, 0, 0, 5, 0, 0],
#              [0, 0, 5, 0, 1, 0, 8, 0, 4],
#              [4, 2, 0, 8, 0, 5, 0, 3, 9],
#              [1, 0, 8, 0, 3, 0, 6, 0, 0],
#              [0, 0, 3, 0, 0, 7, 0, 0, 0],
#              [0, 4, 1, 6, 5, 3, 0, 0, 2],
#              [2, 0, 0, 0, 4, 0, 0, 6, 0]]
    
    ### Medium puzzle
#    puzzle = [[3, 0, 8, 2, 9, 6, 0, 0, 0],
#              [0, 4, 0, 0, 0, 8, 0, 0, 0],
#              [5, 0, 2, 1, 0, 0, 0, 8, 7],
#              [0, 1, 3, 0, 0, 0, 0, 0, 0],
#              [7, 8, 0, 0, 0, 0, 0, 3, 5],
#              [0, 0, 0, 0, 0, 0, 4, 1, 0],
#              [1, 2, 0, 0, 0, 7, 8, 0, 3],
#              [0, 0, 0, 8, 0, 0, 0, 2, 0],
#              [0, 0, 0, 5, 4, 2, 1, 0, 6]]

    ### Hard Puzzle
#    puzzle = [[7, 0, 0, 0, 0, 0, 0, 0, 0],
#              [6, 0, 0, 4, 1, 0, 2, 5, 0],
#              [0, 1, 3, 0, 9, 5, 0, 0, 0],
#              [8, 6, 0, 0, 0, 0, 0, 0, 0],
#              [3, 0, 1, 0, 0, 0, 4, 0, 5],
#              [0, 0, 0, 0, 0, 0, 0, 8, 6],
#              [0, 0, 0, 8, 4, 0, 5, 3, 0],
#              [0, 4, 2, 0, 3, 6, 0, 0, 7],
#              [0, 0, 0, 0, 0, 0, 0, 0, 9]]

    ### EVIL Puzzle         
#    puzzle = [[0, 6, 0, 8, 0, 0, 0, 0, 0],
#              [0, 0, 4, 0, 6, 0, 0, 0, 9],
#              [1, 0, 0, 0, 4, 3, 0, 6, 0],
#              [0, 5, 2, 0, 0, 0, 0, 0, 0],
#              [0, 0, 8, 6, 0, 9, 3, 0, 0],
#              [0, 0, 0, 0, 0, 0, 5, 7, 0],
#              [0, 1, 0, 4, 8, 0, 0, 0, 5],
#              [8, 0, 0, 0, 1, 0, 2, 0, 0],
#              [0, 0, 0, 0, 0, 5, 0, 4, 0]]
              
    print "Solving the following puzzle: "
    print_puzzle( puzzle )
    
    start_time = time.time()
    if not solve_backtrack( puzzle ):
        print "Failed to find a solution! D:"
    else:
        print "It took ", time.time() - start_time, " seconds to solve this puzzle."
    
# Recursive backtracking algorithm to solve puzzle     
def solve_backtrack( puzzle ):    
    
    # store all the possible values remaining for a square
    domain = range(1,10) 
    
    # get a list of the empty squares (remaining variables)
    empty_squares = get_empty_squares( puzzle )
    
    # if there are no remaining empty squares
    if len(empty_squares) == 0: 
        print "Woohoo, success! Check it out:"
        print_puzzle( puzzle )
        return 1
    
    square = get_random_square( empty_squares )
    row = square[0]
    col = square[1]
    
    for value in domain:        
        # check the value against the constraints
        if check_row( square, value, puzzle ):
            if check_col( square, value, puzzle ):
                if check_block( square, value, puzzle ):
                    puzzle[row][col] = value
                    if solve_backtrack( puzzle ):
                        return 1
                    puzzle[row][col] = 0
                    
    return 0 
    
#    while len( domain ) != 0:
#        # get a random value out of the list of remaining possible values
#        value = domain[ int( math.floor( random.random()*len(domain) ) ) ]
#        
#        # check the value against the constraints
#        if check_row( square, value, puzzle ):
#            if check_col( square, value, puzzle ):
#                if check_block( square, value, puzzle ):
#                    puzzle[row][col] = value
#                    if solve_backtrack( puzzle ):
#                        return 1
#                    puzzle[row][col] = 0
#                    domain.remove( value )
#    print "ran out of values, back tracking!"               
#    return 0                    
                    
                    
# return a randomly selected square from the list of empties
def get_random_square( empty_squares ):
   
    # randomly pick one of the empty squares to expand and return it
    return empty_squares[ int(math.floor(random.random()*len(empty_squares))) ]  
    
    
# return the list of empty squares indices for the puzzle
def get_empty_squares ( puzzle ):
    empty_squares = []
    # scan the whole puzzle for empty cells
    for row in range(len( puzzle )):
        for col in range(len( puzzle[1] )):
            if puzzle[row][col] == 0:
                empty_squares.append( [row,col] ) 
    return empty_squares
    
    
# checks the 9x9 block to which the square belongs
def check_block( square, value, puzzle ):
    row = square[0]
    col = square[1]
    block_row = row/3
    block_col = col/3
                  
    for i in range(3):
        for j in range(3):
            if [i,j] == square:
                continue
            if puzzle[block_row*3 + i][block_col*3 + j] == value:
                return 0
    return 1
    
def check_row( square, value, puzzle ):
    row = square[0]
    col = square[1]
    for i in range( len( puzzle ) ):
        if i == square[0]:
            continue
        if puzzle[i][col] == value:
            return 0
            
    return 1
    
    
def check_col( square, value, puzzle ):
    row = square[0]
    col = square[1]
    for i in range(len(puzzle[1])):
        if i == square[1]:
            continue
        if puzzle[row][i] == value:
            return 0
            
    return 1


def print_puzzle( puzzle ):
    for row in puzzle:
        print row           
        

if __name__=="__main__":
    main()
